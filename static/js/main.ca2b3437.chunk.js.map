{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getItems","count","offset","Array","from","length","v","k","map","id","Date","getTime","content","AddNewCardButton","props","type","onClick","columnIndex","AddColumnButton","Card","item","index","ind","deleteCard","key","draggableId","provided","snapshot","className","ref","innerRef","draggableProps","dragHandleProps","style","isDragging","draggableStyle","userSelect","padding","grid","margin","background","display","justifyContent","defaultValue","DeleteCardButton","App","useState","state","setState","addCardToColumn","updatedState","push","newState","splice","filter","group","onDragEnd","result","source","destination","sInd","droppableId","dInd","items","list","startIndex","endIndex","removed","reorder","droppableSource","droppableDestination","sourceClone","destClone","move","el","isDraggingOver","width","droppableProps","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ca2b3437.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport './App.css';\n\n// Copied from https://codesandbox.io/s/-w5szl?file=/src/index.js:0-4999\n\n// fake data generator\nconst getItems = (count, offset = 0) =>\n  Array.from({ length: count }, (v, k) => k).map(k => ({\n    id: `item-${k + offset}-${new Date().getTime()}`,\n    content: `item ${k + offset}`\n  }));\n\nconst reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\n/**\n * Moves an item from one list to another list.\n */\nconst move = (source, destination, droppableSource, droppableDestination) => {\n  const sourceClone = Array.from(source);\n  const destClone = Array.from(destination);\n  const [removed] = sourceClone.splice(droppableSource.index, 1);\n\n  destClone.splice(droppableDestination.index, 0, removed);\n\n  const result = {};\n  result[droppableSource.droppableId] = sourceClone;\n  result[droppableDestination.droppableId] = destClone;\n\n  return result;\n};\n\n/**\n * Styling\n */\nconst grid = 8;\n\nconst getItemStyle = (isDragging, draggableStyle) => ({\n  // some basic styles to make the items look a bit nicer\n  userSelect: \"none\",\n  padding: grid * 2,\n  margin: `0 0 ${grid}px 0`,\n\n  // change background colour if dragging\n  background: isDragging ? \"lightseagreen\" : \"darkseagreen\",\n\n  // styles we need to apply on draggables\n  ...draggableStyle\n});\nconst getListStyle = isDraggingOver => ({\n  background: isDraggingOver ? \"bisque\" : \"blanchedalmond\",\n  padding: grid,\n  width: 250\n});\n\n/**\n * Button to add new card\n */\n const AddNewCardButton = (props) => {\n  return <button\n    type=\"button\"\n    onClick={() => props.onClick(props.columnIndex)}\n  >\n    Add new card\n  </button>\n };\n\n /**\n * Adds a column/swimlane\n */\n const AddColumnButton = (props) => {\n  return <button\n        type=\"button\"\n        onClick={() => props.onClick()}\n      >\n        Add column\n      </button>\n };\n\n/**\n * Card\n */\n const Card = (props) => {\n   const {item, index, ind, deleteCard} = props;\n return <Draggable\n    key={item.id}\n    draggableId={item.id}\n    index={index}\n  >\n    {(provided, snapshot) => (\n      <div\n        className={'card'}\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n        style={getItemStyle(\n          snapshot.isDragging,\n          provided.draggableProps.style\n        )}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            justifyContent: \"space-around\"\n          }}\n        >\n          <textarea defaultValue={item.content}></textarea>\n          <DeleteCardButton index={index} ind={ind} deleteCard={deleteCard}/>\n        </div>\n      </div>\n    )}\n  </Draggable>\n}\n\n/**\n * Delete card button\n */\n const DeleteCardButton = (props) => {\n   const {index, ind, deleteCard} = props;\n   return <button\n      type=\"button\"\n      onClick={() => deleteCard(ind, index)}\n    >\n      delete\n    </button>\n }\n\n/**\n * Main app\n */\nfunction App() {\n  const [state, setState] = useState([getItems(5), getItems(5, 10)]);\n  const addCardToColumn = columnIndex => {\n   const updatedState = [...state];\n   updatedState[columnIndex].push(getItems(1)[0]);\n   setState([...updatedState]);\n  };\n\n  const addColumn = () => setState([...state, []]);\n  const deleteCard = (ind, index) => {\n    const newState = [...state];\n    newState[ind].splice(index, 1);\n    setState(\n      newState.filter(group => group.length)\n    );\n  };\n\n  function onDragEnd(result) {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    const sInd = +source.droppableId;\n    const dInd = +destination.droppableId;\n\n    if (sInd === dInd) {\n      const items = reorder(state[sInd], source.index, destination.index);\n      const newState = [...state];\n      newState[sInd] = items;\n      setState(newState);\n    } else {\n      const result = move(state[sInd], state[dInd], source, destination);\n      const newState = [...state];\n      newState[sInd] = result[sInd];\n      newState[dInd] = result[dInd];\n\n      setState(newState.filter(group => group.length));\n    }\n  }\n\n  return (\n    <div>\n      <AddColumnButton onClick={addColumn}/>\n      <div style={{ display: \"flex\" }}>\n        <DragDropContext onDragEnd={onDragEnd}>\n          {state.map((el, ind) => (\n            <Droppable key={ind} droppableId={`${ind}`}>\n              {(provided, snapshot) => (\n                <div\n                  ref={provided.innerRef}\n                  style={getListStyle(snapshot.isDraggingOver)}\n                  {...provided.droppableProps}\n                >\n                  <AddNewCardButton onClick={addCardToColumn} columnIndex={ind}/>\n\n                  {el.map((item, index) => (\n                    <Card item={item} index={index} ind={ind} deleteCard={deleteCard}/>\n                  ))}\n                  {provided.placeholder}\n                </div>\n              )}\n            </Droppable>\n          ))}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}